### Example Domain
POST {{host}}/task
Content-Type: application/json
Authorization: {{auth_key}}

{
  "script": "await agent.goto('https://example.com/'); resolve(await agent.document.title);"
}

> {%
client.test("Check title", function() {
  client.assert(response.body.output === "Example Domain", "ERROR! Title isn't correct");
});
%}

### Test Error Handling Waiting for not-existed-element
POST {{host}}/task
Content-Type: application/json
Authorization: {{auth_key}}

{
  "script": "await agent.goto('https://example.com/'); await agent.waitForElement('#no-existed-element', {timeoutMs: 10000}); resolve(await agent.document.title);"
}

> {%
client.test("Check Error", function () {
   client.assert(response.body.error.includes('Timeout waiting for element to exist'), "ERROR! TimeoutError has different message");
});
%}

### Test Error Handling for SyntaxError
POST {{host}}/task
Content-Type: application/json
Authorization: {{auth_key}}

{
    "script": "this SCRIPT IS BAD///////////;;;; NOT WORKING"
}

> {%
client.test("SyntaxError", function () {
   client.assert(response.body.error.includes('SyntaxError'), "ERROR! SyntaxError has different message");
});
%}

### CreepJS Score
POST {{host}}/task
Content-Type: application/json
Authorization: {{auth_key}}

{
  "script": "await agent.goto('https://abrahamjuliot.github.io/creepjs/'); await agent.waitForPaintingStable(); const { document } = agent.activeTab; const element = document.querySelector('#fingerprint-data > div.visitor-info > div > div:nth-child(2) > div:nth-child(2) > span'); await agent.waitForElement(element, {waitForVisible: true}); resolve(parseFloat((await element.textContent)?.replace('%', '').trim() ?? '0'));"
}

> {%
    client.test("Check Error", function () {
        client.assert(response.body.output >= 50, "WARNING! CreepJS trust score missing or less than 50%");
    });
%}


### Check handler for UnhandledRejection
POST {{host}}/task
Content-Type: application/json
Authorization: {{auth_key}}

< ./tests/UnhandledRejection.json